--- a/Makefile
+++ b/Makefile
@@ -148,6 +148,12 @@ endif
 endif
 
 # #############################################################################
+# Define ECM_INTERFACE_OVS_ENABLE=y in order to enable support for OVS
+# #############################################################################
+ECM_INTERFACE_OVS_ENABLE=y
+ccflags-$(ECM_INTERFACE_OVS_ENABLE) += -DECM_INTERFACE_OVS_ENABLE
+
+# #############################################################################
 # Define ECM_INTERFACE_VLAN_ENABLE=y in order to enable support for VLAN
 # #############################################################################
 ECM_INTERFACE_VLAN_ENABLE=y
--- a/ecm_interface.c
+++ b/ecm_interface.c
@@ -3265,6 +3265,8 @@ static struct net_device *ecm_interface_
 	return bridge;
 }
 
+extern int ovs_is_internal_dev(const struct net_device *netdev);
+extern struct net_device *ovs_port_dev_get(struct net_device *dest_dev, char *mac, int ip_version, struct sk_buff *skb);
 /*
  * ecm_interface_heirarchy_construct()
  *	Construct an interface heirarchy.
@@ -3321,6 +3323,7 @@ int32_t ecm_interface_heirarchy_construc
 	struct net_device *bridge;
 	struct net_device *top_dev_vlan = NULL;
 	uint32_t serial = ecm_db_connection_serial_get(feci->ci);
+	uint8_t ovs_internal_dev_cnt;
 
 	/*
 	 * Get a big endian of the IPv4 address we have been given as our starting point.
@@ -3561,6 +3564,7 @@ int32_t ecm_interface_heirarchy_construc
 	 * because we add from the end first_interface grows downwards.
 	 */
 	current_interface_index = ECM_DB_IFACE_HEIRARCHY_MAX;
+	ovs_internal_dev_cnt = 0;
 	while (current_interface_index > 0) {
 		struct ecm_db_iface_instance *ii;
 		struct net_device *next_dev;
@@ -3684,6 +3688,22 @@ int32_t ecm_interface_heirarchy_construc
 					break;
 				}
 
+		
+				/* OVS internal inteface? Now we can only support upto two level ovs interface hierarchy */
+				if (!ovs_internal_dev_cnt && ovs_is_internal_dev(dest_dev)) {
+					struct net_device *outer_dev = NULL;
+					uint8_t mac_addr[ETH_ALEN];
+
+					ovs_internal_dev_cnt = 1;
+					memset(mac_addr, 0, ETH_ALEN);
+					if (ecm_interface_multicast_get_next_node_mac_address(next_dest_addr, dest_dev, ip_version, mac_addr)) {
+						outer_dev = ovs_port_dev_get(dest_dev, mac_addr, ip_version, NULL);
+						if (outer_dev) {
+			   				next_dev = outer_dev;
+						}
+					}
+				}
+
 #ifdef ECM_INTERFACE_BOND_ENABLE
 				/*
 				 * LAG?
